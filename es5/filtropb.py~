'''Scrivere uno script python che:

- Risolva l'equazione differenziale per Vout dato Vin.

-Definisca Vin per il tempo 0<=t<=10 tale che:
Vin(t) Ã¨ +1 per t pari e -1 per t dispari (onda quadra?)

-Produca un grafico di Vin e Vout per:
RC=1, RC=0.1, RC=0.01
con la condizione iniziale Vout(0)=0.

-Salvi i risultati (t, Vin(t), Vout(t)) in un file CSV. 
I risultati per Vout(t) per i tre valori di RC vanno salvati nello stesso file.

-OPZIONALE ripetere i passi precendenti con in potenziale Vin diverso.
'''

import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate

#funzione di Vin
def ddpi(t):
    if int(t)%2 == 0:
        return 1
    else:
        return -1

#funzione per l'equazione differenziale
def fddpo(vout, t):
    '''
    funzine fddp(vout)= 1/RC(vin - vout) -> inizialmente R=C=1
    '''
    return (ddpi(t) - vout)

#intervallo [a,b] e punto di partenza Vout(0)=0
a = 0.
b = 10.
v0 = 0.

#lista con diversi valori di N
NN = [10, 20, 100, 1000]

#dizionari per le soluzioni con diversi N
vsol = {}
tsol = {}

#ciclo for sui diversi valori di N
for n in NN:
    h = (b-a)/n

    tt = np.arange(a,b,h)
    vv = np.empty((0,0))

    v = v0

#calcolo soluzioni tramite scipy.integrate.odeint
vv = integrate.odeint(fddpo, y0=v0, t=tt)

#aggiunta soluzioni al dizionario
vsol.update({n : vv})
tsol.update({n : tt})

#grafico soluzioni
fig,ax = plt.subplots(figsize=(9,6))
plt.title('scipy.integrate.odeint ', color='indigo', fontsize=14)

for n in NN:
    plt.plot(tsol[n], vsol[n])

plt.xlabel('t')
plt.ylabel('Vout')
#plt.legend( fontsize=14)
p#lt.legend(loc='lower right', fontsize=14)
plt.text(tsol[10][0], 0.95*max(xsolsp[10]),
         r'$\frac{dVout}{dt} = \frac{1}{RC}(Vin - Vout)$', color='indigo',fontsize=14)
plt.show() 


